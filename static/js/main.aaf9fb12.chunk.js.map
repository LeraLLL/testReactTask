{"version":3,"sources":["app/App.module.scss","components/Navigation/Navigation.module.scss","context/UseContext.js","components/Navigation/Navigation.js","pages/Routes.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","Navigation","useState","value","setValue","className","css","container","Tabs","onChange","event","label","path","map","Tab","key","fullWidth","cn","tabLink","component","Link","to","AboutMePage","lazy","MapPage","TimerPage","Routes","fallback","exact","App","timer","setTimer","useEffect","start","Date","setInterval","now","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,UAAY,yB,mBCA9BD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,UAAY,gC,gCCDpE,6CACaC,EADb,OACuBC,EAAMC,cAAc,K,mMC+C5BC,MA1Cf,WAAwB,IAAD,EACOC,mBAAS,GADhB,mBACbC,EADa,KACNC,EADM,KAkBrB,OACE,yBAAKC,UAAWC,IAAIC,WAClB,kBAACC,EAAA,EAAD,CACEL,MAAOA,EACPM,SAAU,SAACC,EAAOP,GAAYC,EAASD,KAnB7B,CACd,CACEQ,MAAO,kCACPC,KAAM,KAER,CACED,MAAO,iCACPC,KAAM,QAER,CACED,MAAO,uCACPC,KAAM,WAWMC,KACN,gBAAEF,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAT,OACE,kBAACE,EAAA,EAAD,CACEC,IAAKJ,EACLK,WAAS,EACTL,MAAOA,EACPN,UAAWY,IAAGX,IAAIY,SAClBC,UAAWC,IACXC,GAAIT,U,OCpCdU,EAAcC,gBAAK,kBAAM,uDACzBC,EAAUD,gBAAK,kBAAM,uDACrBE,EAAYF,gBAAK,kBAAM,uDAcdG,MAZf,WACE,OACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOf,KAAK,IAAIgB,OAAK,EAACT,UAAWG,IACjC,kBAAC,IAAD,CAAOV,KAAK,OAAOgB,OAAK,EAACT,UAAWK,IACpC,kBAAC,IAAD,CAAOZ,KAAK,SAASgB,OAAK,EAACT,UAAWM,O,QCmB/BI,MAzBf,WAAgB,IAAD,EACa3B,mBAAS,GADtB,mBACN4B,EADM,KACCC,EADD,KAWb,OARAC,qBAAU,WACR,IAAMC,EAAQ,IAAIC,KAClBC,aAAY,WACV,IAAMC,EAAM,IAAIF,KAChBH,EAASK,EAAMH,KACd,OACF,IAGD,kBAAC,IAAQI,SAAT,CAAkBlC,MAAO,CAAE2B,QAAOC,aAChC,yBAAK1B,UAAWY,IAAGX,IAAIuB,MACrB,gCACE,kBAAC,EAAD,OAEF,yBAAKxB,UAAWY,IAAGX,IAAIC,YACrB,kBAAC,EAAD,UCbU+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aaf9fb12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__169ww\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabLink\":\"Navigation_tabLink__1sFwd\",\"container\":\"Navigation_container__xEk5z\"};","import React from 'react'\r\nexport const Context = React.createContext('')\r\n","import React, { useState } from 'react'\r\nimport {Tabs, Tab} from '@material-ui/core'\r\nimport css from './Navigation.module.scss'\r\nimport cn from 'classnames'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Navigation () {\r\n  const [ value, setValue ] = useState(0)\r\n\r\n  const navList = [\r\n    {\r\n      label: 'О себе',\r\n      path: '/'\r\n    },\r\n    {\r\n      label: 'Карта',\r\n      path: '/map'\r\n    },\r\n    {\r\n      label: 'Таймер',\r\n      path: '/timer'\r\n    }\r\n  ]\r\n\r\n  return(\r\n    <div className={css.container}>\r\n      <Tabs\r\n        value={value}\r\n        onChange={(event, value) => { setValue(value)}}\r\n      >\r\n        {\r\n          navList.map(\r\n            ({label, path})=>\r\n              <Tab\r\n                key={label}\r\n                fullWidth\r\n                label={label}\r\n                className={cn(css.tabLink)}\r\n                component={Link}\r\n                to={path}\r\n            />\r\n          )\r\n        }\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation","import { Switch, Route } from 'react-router-dom'\r\nimport React, { Suspense, lazy } from 'react';\r\n\r\nconst AboutMePage = lazy(() => import('./AboutMePage/AboutMePage'))\r\nconst MapPage = lazy(() => import('./MapPage/MapPage'))\r\nconst TimerPage = lazy(() => import('./TimerPage/TimerPage'))\r\n\r\nfunction Routes () {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Switch>\r\n        <Route path='/' exact component={AboutMePage} />\r\n        <Route path='/map' exact component={MapPage} />\r\n        <Route path='/timer' exact component={TimerPage} />\r\n      </Switch>\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import React, { useEffect, useState } from 'react'\nimport css from './App.module.scss';\nimport Navigation from '../components/Navigation/Navigation'\nimport Routes from '../pages/Routes'\nimport cn from 'classnames'\nimport { Context } from '../context/UseContext'\n\nfunction App() {\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    const start = new Date()\n    setInterval(() => {\n      const now = new Date()\n      setTimer(now - start)\n    }, 1000)\n  }, [])\n\n  return (\n    <Context.Provider value={{ timer, setTimer }}>\n      <div className={cn(css.App)}>\n        <header>\n          <Navigation/>\n        </header>\n        <div className={cn(css.container)}>\n          <Routes/>\n        </div>\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}